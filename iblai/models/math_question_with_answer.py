# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 2.3.36-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iblai.models.math_question_cognitive_skills import MathQuestionCognitiveSkills
from iblai.models.skill import Skill
from iblai.models.sub_topic import SubTopic
from iblai.models.topic import Topic
from typing import Optional, Set
from typing_extensions import Self

class MathQuestionWithAnswer(BaseModel):
    """
    MathQuestionWithAnswer
    """ # noqa: E501
    id: StrictInt
    topic: Topic
    sub_topic: SubTopic
    skills_assessed: List[Skill]
    content: StrictStr
    difficulty: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    cognitive_skills: Optional[MathQuestionCognitiveSkills] = None
    grade: Optional[Annotated[int, Field(le=16, strict=True, ge=1)]] = None
    expected_time_to_solve: Optional[StrictStr] = None
    related_concepts: Optional[StrictStr] = None
    hints_provided: Optional[StrictStr] = None
    learning_outcomes: Optional[StrictStr] = None
    prerequisites: Optional[StrictStr] = None
    recommended_grade_level: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    expected_answer: Optional[StrictStr] = Field(default=None, description="The answer to the math problem")
    image: Optional[StrictStr] = None
    answer_image: Optional[StrictStr] = None
    created_at: datetime
    updated_at: datetime
    platform: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "topic", "sub_topic", "skills_assessed", "content", "difficulty", "cognitive_skills", "grade", "expected_time_to_solve", "related_concepts", "hints_provided", "learning_outcomes", "prerequisites", "recommended_grade_level", "expected_answer", "image", "answer_image", "created_at", "updated_at", "platform"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MathQuestionWithAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of topic
        if self.topic:
            _dict['topic'] = self.topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_topic
        if self.sub_topic:
            _dict['sub_topic'] = self.sub_topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in skills_assessed (list)
        _items = []
        if self.skills_assessed:
            for _item in self.skills_assessed:
                if _item:
                    _items.append(_item.to_dict())
            _dict['skills_assessed'] = _items
        # override the default output from pydantic by calling `to_dict()` of cognitive_skills
        if self.cognitive_skills:
            _dict['cognitive_skills'] = self.cognitive_skills.to_dict()
        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if answer_image (nullable) is None
        # and model_fields_set contains the field
        if self.answer_image is None and "answer_image" in self.model_fields_set:
            _dict['answer_image'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MathQuestionWithAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "topic": Topic.from_dict(obj["topic"]) if obj.get("topic") is not None else None,
            "sub_topic": SubTopic.from_dict(obj["sub_topic"]) if obj.get("sub_topic") is not None else None,
            "skills_assessed": [Skill.from_dict(_item) for _item in obj["skills_assessed"]] if obj.get("skills_assessed") is not None else None,
            "content": obj.get("content"),
            "difficulty": obj.get("difficulty"),
            "cognitive_skills": MathQuestionCognitiveSkills.from_dict(obj["cognitive_skills"]) if obj.get("cognitive_skills") is not None else None,
            "grade": obj.get("grade"),
            "expected_time_to_solve": obj.get("expected_time_to_solve"),
            "related_concepts": obj.get("related_concepts"),
            "hints_provided": obj.get("hints_provided"),
            "learning_outcomes": obj.get("learning_outcomes"),
            "prerequisites": obj.get("prerequisites"),
            "recommended_grade_level": obj.get("recommended_grade_level"),
            "expected_answer": obj.get("expected_answer"),
            "image": obj.get("image"),
            "answer_image": obj.get("answer_image"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "platform": obj.get("platform")
        })
        return _obj



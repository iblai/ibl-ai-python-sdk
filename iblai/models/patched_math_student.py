# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 2.3.36-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchedMathStudent(BaseModel):
    """
    PatchedMathStudent
    """ # noqa: E501
    id: Optional[StrictInt] = None
    student: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="edX user ID")
    level: Optional[StrictInt] = None
    points: Optional[StrictInt] = None
    correct_questions_for_level: Optional[StrictInt] = Field(default=None, description="Number of correctly answered questions at the student's current level")
    no_incorrect_questions_for_level: Optional[StrictInt] = Field(default=None, description="Number of incorrectly answered questions at the student's current level")
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    acquired_skills: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "student", "level", "points", "correct_questions_for_level", "no_incorrect_questions_for_level", "created_at", "updated_at", "acquired_skills"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedMathStudent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "student",
            "level",
            "points",
            "correct_questions_for_level",
            "no_incorrect_questions_for_level",
            "created_at",
            "updated_at",
            "acquired_skills",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedMathStudent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "student": obj.get("student"),
            "level": obj.get("level"),
            "points": obj.get("points"),
            "correct_questions_for_level": obj.get("correct_questions_for_level"),
            "no_incorrect_questions_for_level": obj.get("no_incorrect_questions_for_level"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "acquired_skills": obj.get("acquired_skills")
        })
        return _obj



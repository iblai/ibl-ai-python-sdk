# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 2.3.38-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iblai.models.math_question_with_answer import MathQuestionWithAnswer
from iblai.models.math_student import MathStudent
from typing import Optional, Set
from typing_extensions import Self

class PatchedStudentAnswer(BaseModel):
    """
    PatchedStudentAnswer
    """ # noqa: E501
    id: Optional[StrictInt] = None
    math_student: Optional[MathStudent] = None
    question: Optional[MathQuestionWithAnswer] = None
    answer: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    is_correct: Optional[StrictBool] = None
    score: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    feedback: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "math_student", "question", "answer", "image", "is_correct", "score", "feedback", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedStudentAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of math_student
        if self.math_student:
            _dict['math_student'] = self.math_student.to_dict()
        # override the default output from pydantic by calling `to_dict()` of question
        if self.question:
            _dict['question'] = self.question.to_dict()
        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if is_correct (nullable) is None
        # and model_fields_set contains the field
        if self.is_correct is None and "is_correct" in self.model_fields_set:
            _dict['is_correct'] = None

        # set to None if feedback (nullable) is None
        # and model_fields_set contains the field
        if self.feedback is None and "feedback" in self.model_fields_set:
            _dict['feedback'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedStudentAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "math_student": MathStudent.from_dict(obj["math_student"]) if obj.get("math_student") is not None else None,
            "question": MathQuestionWithAnswer.from_dict(obj["question"]) if obj.get("question") is not None else None,
            "answer": obj.get("answer"),
            "image": obj.get("image"),
            "is_correct": obj.get("is_correct"),
            "score": obj.get("score"),
            "feedback": obj.get("feedback"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


